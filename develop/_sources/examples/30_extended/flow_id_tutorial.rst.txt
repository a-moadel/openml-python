
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/30_extended/flow_id_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_30_extended_flow_id_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_30_extended_flow_id_tutorial.py:


==================
Obtaining Flow IDs
==================

This tutorial discusses different ways to obtain the ID of a flow in order to perform further
analysis.

.. GENERATED FROM PYTHON SOURCE LINES 11-25

.. code-block:: default


    # License: BSD 3-Clause

    import sklearn.tree

    import openml


    # Activating test server
    openml.config.start_using_configuration_for_example()


    clf = sklearn.tree.DecisionTreeClassifier()








.. GENERATED FROM PYTHON SOURCE LINES 26-29

1. Obtaining a flow given a classifier
======================================


.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: default


    flow = openml.extensions.get_extension_by_model(clf).model_to_flow(clf).publish()
    flow_id = flow.flow_id
    print(flow_id)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    35896




.. GENERATED FROM PYTHON SOURCE LINES 35-44

This piece of code is rather involved. First, it retrieves a
:class:`~openml.extensions.Extension` which is registered and can handle the given model,
in our case it is :class:`openml.extensions.sklearn.SklearnExtension`. Second, the extension
converts the classifier into an instance of :class:`openml.flow.OpenMLFlow`. Third and finally,
the publish method checks whether the current flow is already present on OpenML. If not,
it uploads the flow, otherwise, it updates the current instance with all information computed
by the server (which is obviously also done when uploading/publishing a flow).

To simplify the usage we have created a helper function which automates all these steps:

.. GENERATED FROM PYTHON SOURCE LINES 44-48

.. code-block:: default


    flow_id = openml.flows.get_flow_id(model=clf)
    print(flow_id)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    35896




.. GENERATED FROM PYTHON SOURCE LINES 49-58

2. Obtaining a flow given its name
==================================
The schema of a flow is given in XSD (`here
<https://github.com/openml/OpenML/blob/master/openml_OS/views/pages/api_new/v1/xsd/openml.implementation.upload.xsd>`_).  # noqa E501
Only two fields are required, a unique name, and an external version. While it should be pretty
obvious why we need a name, the need for the additional external version information might not
be immediately clear. However, this information is very important as it allows to have multiple
flows with the same name for different versions of a software. This might be necessary if an
algorithm or implementation introduces, renames or drop hyperparameters over time.

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default


    print(flow.name, flow.external_version)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    sklearn.tree._classes.DecisionTreeClassifier openml==0.11.1dev,sklearn==0.24.0




.. GENERATED FROM PYTHON SOURCE LINES 62-64

The name and external version are automatically added to a flow when constructing it from a
model. We can then use them to retrieve the flow id as follows:

.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: default


    flow_id = openml.flows.flow_exists(name=flow.name, external_version=flow.external_version)
    print(flow_id)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    35896




.. GENERATED FROM PYTHON SOURCE LINES 69-70

We can also retrieve all flows for a given name:

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default

    flow_ids = openml.flows.get_flow_id(name=flow.name)
    print(flow_ids)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [27, 30, 9320, 13478, 30838, 31092, 35896]




.. GENERATED FROM PYTHON SOURCE LINES 74-75

This also works with the actual model (generalizing the first part of this example):

.. GENERATED FROM PYTHON SOURCE LINES 75-80

.. code-block:: default

    flow_ids = openml.flows.get_flow_id(model=clf, exact_version=False)
    print(flow_ids)

    # Deactivating test server
    openml.config.stop_using_configuration_for_example()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [27, 30, 9320, 13478, 30838, 31092, 35896]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.317 seconds)


.. _sphx_glr_download_examples_30_extended_flow_id_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: flow_id_tutorial.py <flow_id_tutorial.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: flow_id_tutorial.ipynb <flow_id_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
